#!/bin/bash -x

array=( 1 2 3 4 5 )
for vmi in "${array[@]}"
do

#cd /opt/vmlocal/kvm/guests
cd /mnt/vmlocal/kvm/guests

rm -rf udvm`echo $vmi`

virsh destroy udvm`echo $vmi`
virsh undefine --nvram udvm`echo $vmi`

done

# Setup network
mkdir -p /mnt/vmlocal/kvm/network
cd /mnt/vmlocal/kvm/network
rm -rf *

declare -A PF_IFACE
pfi=0
NIC_DIR="/sys/class/net"
for i in $( ls $NIC_DIR) ;
do
    if [ -d "${NIC_DIR}/$i/device" -a ! -L "${NIC_DIR}/$i/device/physfn" ]; then
        declare -a VF_PCI_BDF
        declare -a VF_INTERFACE
        k=0
        for j in $( ls "${NIC_DIR}/$i/device" ) ;
        do
            if [[ "$j" == "virtfn"* ]]; then
                VF_PCI=$( readlink "${NIC_DIR}/$i/device/$j" | cut -d '/' -f2 )
                VF_PCI_BDF[$k]=$VF_PCI
                #get the interface name for the VF at this PCI Address
                for iface in $( ls $NIC_DIR );
                do
                    link_dir=$( readlink ${NIC_DIR}/$iface )
                    if [[ "$link_dir" == *"$VF_PCI"* ]]; then
                        VF_INTERFACE[$k]=$iface
                    fi
                done
                ((k++))
            fi
        done
        NUM_VFs=${#VF_PCI_BDF[@]}
        if [[ $NUM_VFs -gt 0 ]]; then
            #get the PF Device Description
            PF_PCI=$( readlink "${NIC_DIR}/$i/device" | cut -d '/' -f4 )
            PF_VENDOR=$( lspci -vmmks $PF_PCI | grep ^Vendor | cut -f2)
            PF_NAME=$( lspci -vmmks $PF_PCI | grep ^Device | cut -f2).

            echo "Setup passthrough network for interface: $i"
            PF_IFACE[$pfi]=$i

            virsh net-destroy passthrough-`echo $i`
            virsh net-undefine passthrough-`echo $i`

cat <<EOF > passthrough-`echo $i`.xml
<network>
    <name>passthrough-$i</name>
    <forward mode='hostdev' managed='yes'>
        <pf dev='$i'/>
    </forward>
</network>
EOF

            virsh net-define passthrough-`echo $i`.xml
#            virsh net-start passthrough-`echo $i`

#            echo "Virtual Functions on $PF_VENDOR $PF_NAME ($i):"
#            echo -e "PCI BDF\t\tInterface"
#            echo -e "=======\t\t========="
#            for (( l = 0; l < $NUM_VFs; l++ )) ;
#            do
#                echo -e "${VF_PCI_BDF[$l]}\t${VF_INTERFACE[$l]}"
#            done
            unset VF_PCI_BDF
            unset VF_INTERFACE
#            echo " "
            ((pfi++))
        fi
    fi
done

IFACE="passthrough-%s"
NUM_PFs=${#PF_IFACE[@]}
if [[ $NUM_PFs -gt 0 ]]; then
    PFDEVICE=0
    IFACE=$(printf $IFACE ${PF_IFACE[$PFDEVICE]})

    echo "IFACE=$IFACE"
    virsh net-start `echo $IFACE`
    virsh net-autostart `echo $IFACE`
fi

pacman -Sy cdrtools

declare -A DEV_DISKS
ddi=0
DEV_DISK_DIR="/dev/disk/by-id"
for i in $( ls $DEV_DISK_DIR);
do
    if [[ $i =~ ST3000DM|Hitachi_HDS5C ]]; then
        DEV_DISK_POSTFIX=$(ls -la ${DEV_DISK_DIR}/$i | awk -F"${DEV_DISK_DIR}/$i -> ../../" '{print $2}')
        if [[ $DEV_DISK_POSTFIX =~ [^0-9]$ ]]; then
            echo "Setup block device for: $i"
            DEV_DISKS[$ddi]=${DEV_DISK_DIR}/$i
            ((ddi++))
        fi
    fi
done

NUM_DDs=${#DEV_DISKS[@]}

# Setup fedora atomic ceph cluster
#mkdir -p /opt/vmlocal/kvm/guests
mkdir -p /mnt/vmlocal/kvm/guests

rm -rf /mnt/vmlocal/kvm/guests/tmp_udvm
mkdir -p /mnt/vmlocal/kvm/guests/tmp_udvm
#curl -O -L https://download.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20180201.0/CloudImages/x86_64/images/Fedora-Atomic-27-20180104.5.x86_64.qcow2
curl -L https://getfedora.org/atomic_qcow2_latest -o /mnt/vmlocal/kvm/guests/tmp_udvm/atomic_qcow2_latest.qcow2

mkdir -p /opt/ceph
chmod -R 777 /opt/ceph
rm -rf /opt/ceph/*

array=( 1 2 3 4 5 )
for vmi in "${array[@]}"
do

#cd /opt/vmlocal/kvm/guests
cd /mnt/vmlocal/kvm/guests

mkdir -p udvm`echo $vmi`/config
cd udvm`echo $vmi`

cp /mnt/vmlocal/kvm/guests/tmp_udvm/atomic_qcow2_latest.qcow2 /mnt/vmlocal/kvm/guests/udvm`echo $vmi`/atomic_qcow2_latest.qcow2

cat <<EOF > config/udvm`echo $vmi`.xml
<domain type='kvm'>
  <name>udvm$vmi</name>
  <description>Upsidedown vm $vmi</description>
  <memory unit='KiB'>2097152</memory>
  <vcpu placement='static'>1</vcpu>
  <os>
    <type arch='x86_64' machine='pc-i440fx-2.11'>hvm</type>
    <boot dev='hd'/>
  </os>
  <features>
    <acpi/>
    <apic/>
  </features>
  <cpu mode='custom' match='exact' check='partial'>
    <model fallback='allow'>Nehalem</model>
  </cpu>
  <clock offset='utc'>
    <timer name='rtc' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='delay'/>
    <timer name='hpet' present='no'/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='/mnt/vmlocal/kvm/guests/udvm$vmi/atomic_qcow2_latest.qcow2'/>
      <target dev='vda' bus='virtio'/>
    </disk>
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <source file='/mnt/vmlocal/kvm/guests/udvm$vmi/init.iso'/>
      <target dev='hda' bus='ide'/>
      <readonly/>
    </disk>
    <filesystem type='mount' accessmode='mapped'>
      <source dir='/opt/ceph'/>
      <target dir='/opt/ceph'/>
    </filesystem>
    <interface type='network'>
      <source network='$IFACE'/>
      <model type='rtl8139'/>
    </interface>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    <channel type='unix'>
      <target type='virtio' name='org.qemu.guest_agent.0'/>
    </channel>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
    <graphics type='vnc' port='-1' autoport='yes' listen='0.0.0.0'>
      <listen type='address' address='0.0.0.0'/>
    </graphics>
    <video>
      <model type='cirrus' vram='9216' heads='1'/>
    </video>
    <memballoon model='virtio'>
    </memballoon>
    <rng model='virtio'>
      <backend model='random'>/dev/urandom</backend>
    </rng>
EOF

## Setup network
#declare -A PF_PCI_BDF
#pfi=0
#NIC_DIR="/sys/class/net"
#for i in $( ls $NIC_DIR) ;
#do
#    if [ -d "${NIC_DIR}/$i/device" -a ! -L "${NIC_DIR}/$i/device/physfn" ]; then
#        PF_PCI_BDF[$pfi]=$( readlink "${NIC_DIR}/$i/device" )
#	echo ${PF_PCI_BDF[$pfi]}
#	((pfi++))
#    fi
#done
#
#NUM_PFs=${#PF_PCI_BDF[@]}
#if [[ $NUM_PFs -gt 0 ]]; then
#    PFDEVICE=0
#    DOMAIN=$(echo ${PF_PCI_BDF[$PFDEVICE]} | awk '{match($1,"([0-9]+):([0-9]+):([0-9]+).([0-9]+)",a)}END{print a[1]}')
#    BUS=$(echo ${PF_PCI_BDF[$PFDEVICE]} | awk '{match($1,"([0-9]+):([0-9]+):([0-9]+).([0-9]+)",a)}END{print a[2]}')
#    SLOT=$(echo ${PF_PCI_BDF[$PFDEVICE]} | awk '{match($1,"([0-9]+):([0-9]+):([0-9]+).([0-9]+)",a)}END{print a[3]}')
#    FUNCTION=$(echo ${PF_PCI_BDF[$PFDEVICE]} | awk '{match($1,"([0-9]+):([0-9]+):([0-9]+).([0-9]+)",a)}END{print a[4]}')
#cat <<EOF >> config/udvm`echo $vmi`.xml
#    <hostdev mode='subsystem' type='pci' managed='yes'>
#      <source>
#	    <address type='pci' domain='0x$DOMAIN' bus='0x$BUS' slot='0x$SLOT' function='0x$FUNCTION'/>
#      </source>
#    </hostdev>
#EOF
#fi

if [[ $vmi -le $NUM_DDs ]]; then
    DDi=$(($vmi - 1))
    DEV_DISK_POSTFIX=$(ls -la ${DEV_DISKS[$DDi]} | awk -F"${DEV_DISKS[$DDi]} -> ../../" '{print $2}')
    wipe -r /dev/`echo $DEV_DISK_POSTFIX`1
    wipe -r /dev/`echo $DEV_DISK_POSTFIX`2
    wipe -r /dev/`echo $DEV_DISK_POSTFIX`3
    wipe -r /dev/`echo $DEV_DISK_POSTFIX`4
    wipefs /dev/`echo $DEV_DISK_POSTFIX`
    sgdisk -Z /dev/`echo $DEV_DISK_POSTFIX`
    /usr/sbin/sgdisk --clear --mbrtogpt -- /dev/`echo $DEV_DISK_POSTFIX`
#    dd if=/dev/urandom | pv | sudo dd of=/dev/`echo $DEV_DISK_POSTFIX` bs=1M
    echo "Setup block device for: ${DEV_DISKS[$DDi]}"
    echo "Setup block device for with postfix: $DEV_DISK_POSTFIX"
cat <<EOF >> config/udvm`echo $vmi`.xml
    <disk type="block" device="disk">
      <driver name="qemu" type="raw" />
      <source dev="${DEV_DISKS[$DDi]}" />
      <!-- target dev="$DEV_DISK_POSTFIX" bus="virtio" / -->
      <!-- target dev="v${DEV_DISK_POSTFIX:(-2)}" bus="virtio" / -->
      <target dev="vdb" bus="virtio" />
    </disk>
EOF
fi

cat <<EOF >> config/udvm`echo $vmi`.xml
  </devices>
</domain>
EOF

cat <<EOF > meta-data
instance-id: udvmid$vmi
local-hostname: udvm$vmi
EOF

cat <<EOF > user-data
#cloud-config
password: atomic
ssh_pwauth: True
chpasswd: { expire: True }

ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD1+qwWHMFQu0P8tHBaLrJvKiBfvieCXP3n0ET1YOpWn+56ibbUFJCXnBTAubx9s991R6eweFobYojJdytrxMh2zPKuCHD/pUKCpEh/ZWO/MO6PERK9F3tSOYSxHzaVJ5z0Yj/W6xWd2eoKNVjN1kuBNQQrbWbGyTvf3WPNmQQ7+zUf70YkhnBHQYOMA3MTQ5yl9UsybG8GfwtMtwBGeCSwFg50m1UgFECHgM3oiyzY7NLBgTHgkrkvqLf4Z062gJ/fB+/Yne8/dh8fqKB2VCUQ8eN0AspFa6czzgyrIYmxoO+KJNks+gT5mPY02loroq+Ee78fL+51eLfcSXnu6UwN root@upsidedownvm1
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDaGLHzNBlg+aF455ViJGPIUIvTIpoNlYDCyaoohhqqf9F1E38CoX3iQz/mwZDFFkdGb9VrP9GIXAmf89zfxSOhQJ/1jw7p33oHgNIHQXvm08Ax1AdwxPRIibTGoMkIyCZsVa8kYV6uCSJA3zerD6+i12UxxU426/5JtOTQf+Xhx9ENtiT9xV5UuNCodF1czqkl3QQGPeOzO42nYvsZNaX5ZlEifhU2Kdsyy7RO3RNjIBCqthhynS4g0OrdIuH40U2Jevn21xFSJRlZiAkzYTHpdgdnszokatsXKIN2WCXYVXzKOh4WzZJXbh+p6HjuG5EnqsPuABRnhi3qXMIidM38pjHeZMdOmTuySfTRibM6ufsIzaQWsSWlM1zWPa/FXsNbKG3M6XQE2yBalfMUe6VQliO2r8lSfalDVIUBDNnPCQYrPTmaqA4zwSyCPy52hxBn09Sc2Tjp2xbaCa73ACnp281ByD2iH+xt7H09jmBwafCpHsAiQ7LN/BRsdl34tLxGqYRhc51qr5vRbLgZGEZFfoJ7vg7QBgLk4RaJb8M8pg0sHZTyKWfE1f6Q79ydsj6D9a8QxkK/a8tvWAEzB7bD5oyGRLY5e0qpnBgZelMOkFcjtJ1xDdqRwRGRoKyE0pMPpHBeNgBlBMiVOHaqEHQAcOoSy3QB5tUZL9tz2hCV7w== dbenavraham@gogoair.com

write_files:
  - content: |
        #!/bin/bash
        echo "Setup ceph" >> /home/fedora/runcmd.log
        mkdir -p /opt/ceph
        mount -t 9p -o trans=virtio,version=9p2000.L /opt/ceph /opt/ceph
EOF

if [[ $vmi -gt 1 ]]; then
cat <<EOF >> user-data
        tar -xzf /opt/ceph/ceph.tgz -C /
EOF
fi

cat <<EOF >> user-data
        mkdir /var/lib/ceph
        chcon -Rt svirt_sandbox_file_t /etc/ceph
        chcon -Rt svirt_sandbox_file_t /var/lib/ceph
        chown -R 64045:64045 /var/lib/ceph
        echo "Ceph setup done!" >> /home/fedora/runcmd.log
        ip=\$(ip addr show eth0 | grep "inet\b" | awk '{print \$2}' | cut -d/ -f1)
        echo "eth0 ip = \$ip" >> /home/fedora/runcmd.log
        echo "Start ceph docker mon" >> /home/fedora/runcmd.log
        docker run -d --net=host --restart always -v /etc/ceph:/etc/ceph -v /var/lib/ceph/:/var/lib/ceph/ -e MON_IP=\$ip -e CEPH_PUBLIC_NETWORK=192.168.1.0/24 --name="ceph-mon" ceph/daemon mon
        echo "Ceph docker mon started" >> /home/fedora/runcmd.log
    path: /opt/docker/ceph-mon.sh
    permissions: 0755
  - content: |
        [Unit]
        Description=Start ceph mon docker container
        After=network-online.target

        [Service]
        Type=forking
        ExecStart=/usr/bin/bash /opt/docker/ceph-mon.sh

        [Install]
        WantedBy=multi-user.target
    path: /etc/systemd/system/ceph-mon.service
  - content: |
        #!/bin/bash
        echo "Start ceph docker mgr" >> /home/fedora/runcmd.log
EOF

if [[ $vmi -eq 1 ]]; then
cat <<EOF >> user-data
        file=/etc/ceph/ceph.mon.keyring
        while [ ! -f "\$file" ]
        do
        #    inotifywait -qqt 5 -e create -e moved_to "\$(dirname \$file)"
            echo "Ceph files still not ready. Sleep for 5 seconds..."
            sleep 5
        done
        tar -czf /opt/ceph/ceph.tgz -C / etc/ceph
EOF
fi

cat <<EOF >> user-data
        docker run -d --net=host --privileged=true --pid=host -v /etc/ceph:/etc/ceph -v /var/lib/ceph/:/var/lib/ceph/ --name="ceph-mgr" --restart=always ceph/daemon mgr
        echo "Ceph docker mgr started" >> /home/fedora/runcmd.log
    path: /opt/docker/ceph-mgr.sh
    permissions: 0755
  - content: |
        [Unit]
        Description=Start ceph mgr docker container
        After=ceph-mon.service

        [Service]
        Type=forking
        ExecStart=/usr/bin/bash /opt/docker/ceph-mgr.sh

        [Install]
        WantedBy=multi-user.target
    path: /etc/systemd/system/ceph-mgr.service
  - content: |
        #!/bin/bash
        #ceph-disk zap /dev/vdb
        #wipefs /dev/vdb
        #/usr/sbin/sgdisk --clear --mbrtogpt -- /dev/vdb
        echo "Start ceph docker osd" >> /home/fedora/runcmd.log
        ceph auth get client.bootstrap-osd -o /var/lib/ceph/bootstrap-osd/ceph.keyring
        docker run -d --net=host --privileged=true --pid=host -v /etc/ceph:/etc/ceph -v /var/lib/ceph/:/var/lib/ceph/ -v /dev/:/dev/ -e OSD_FORCE_ZAP=1 -e OSD_DEVICE=/dev/vdb --name="ceph-osd" --restart=always ceph/daemon osd_ceph_disk
        echo "Ceph docker osd started" >> /home/fedora/runcmd.log
    path: /opt/docker/ceph-osd.sh
    permissions: 0755
  - content: |
        [Unit]
        Description=Start ceph osd docker container
        After=ceph-mgr.target

        [Service]
        Type=forking
        ExecStart=/usr/bin/bash /opt/docker/ceph-osd.sh

        [Install]
        WantedBy=multi-user.target
    path: /etc/systemd/system/ceph-osd.service
  - content: |
        #!/bin/bash
        echo "Start ceph docker mds" >> /home/fedora/runcmd.log
        docker run -d --net=host --name ceph-mds --restart always -v /var/lib/ceph/:/var/lib/ceph/ -v /etc/ceph:/etc/ceph -e CEPHFS_CREATE=1 -e CEPHFS_DATA_POOL_PG=256 -e CEPHFS_METADATA_POOL_PG=256 ceph/daemon mds
        echo "Ceph docker mds started" >> /home/fedora/runcmd.log
    path: /opt/docker/ceph-mds.sh
    permissions: 0755
  - content: |
        [Unit]
        Description=Start ceph mds docker container
        After=ceph-osd.target

        [Service]
        Type=forking
        ExecStart=/usr/bin/bash /opt/docker/ceph-mds.sh

        [Install]
        WantedBy=multi-user.target
    path: /etc/systemd/system/ceph-mds.service
EOF

if [[ $vmi -eq $NUM_DDs ]]; then
cat <<EOF >> user-data
  - content: |
        #!/bin/bash
        echo "Setup ceph settings" >> /home/fedora/runcmd.log
        ceph osd pool set cephfs_data size 2
        ceph osd pool set cephfs_metadata size 2
        ceph osd set noscrub
        ceph osd set nodeep-scrub
        ceph auth get-or-create client.dockerswarm osd 'allow rw' mon 'allow r' mds 'allow' > /etc/ceph/keyring.dockerswarm
        echo "Ceph settings setup!" >> /home/fedora/runcmd.log
    path: /opt/docker/ceph-settings.sh
    permissions: 0755
  - content: |
        [Unit]
        Description=Setup ceph settings
        After=ceph-mds.target

        [Service]
        Type=forking
        ExecStart=/usr/bin/bash /opt/docker/ceph-settings.sh

        [Install]
        WantedBy=multi-user.target
    path: /etc/systemd/system/ceph-settings.service
EOF
fi

cat <<EOF >> user-data
runcmd:
  - systemctl enable ceph-mon.service
  - systemctl enable ceph-mgr.service
  - systemctl enable ceph-osd.service
  - systemctl enable ceph-mds.service
  - systemctl start ceph-mon.service
  - systemctl start ceph-mgr.service
  - systemctl start ceph-osd.service
  - systemctl start ceph-mds.service
EOF

if [[ $vmi -eq $NUM_DDs ]]; then
cat <<EOF >> user-data
  - systemctl enable ceph-settings.service
  - systemctl start ceph-settings.service
EOF
fi

genisoimage -output init.iso -volid cidata -joliet -rock user-data meta-data

virsh define config/udvm`echo $vmi`.xml
virsh start udvm`echo $vmi`
virsh autostart udvm`echo $vmi`

file=/opt/ceph/ceph.tgz
while [ ! -f "$file" ]
do
    inotifywait -qqt 5 -e create -e moved_to "$(dirname $file)"
#    echo "Ceph files still not ready. Sleep for 5 seconds..."
#    sleep 5
done

done

rm -rf /mnt/vmlocal/kvm/guests/tmp_udvm

exit 1