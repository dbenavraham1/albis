#!/bin/bash -x

# Setup network
mkdir -p /mnt/vmlocal/kvm/network
cd /mnt/vmlocal/kvm/network
rm -rf *

declare -A PF_IFACE
pfi=0
NIC_DIR="/sys/class/net"
for i in $( ls $NIC_DIR) ;
do
    if [ -d "${NIC_DIR}/$i/device" -a ! -L "${NIC_DIR}/$i/device/physfn" ]; then
        declare -a VF_PCI_BDF
        declare -a VF_INTERFACE
        k=0
        for j in $( ls "${NIC_DIR}/$i/device" ) ;
        do
            if [[ "$j" == "virtfn"* ]]; then
                VF_PCI=$( readlink "${NIC_DIR}/$i/device/$j" | cut -d '/' -f2 )
                VF_PCI_BDF[$k]=$VF_PCI
                #get the interface name for the VF at this PCI Address
                for iface in $( ls $NIC_DIR );
                do
                    link_dir=$( readlink ${NIC_DIR}/$iface )
                    if [[ "$link_dir" == *"$VF_PCI"* ]]; then
                        VF_INTERFACE[$k]=$iface
                    fi
                done
                ((k++))
            fi
        done
        NUM_VFs=${#VF_PCI_BDF[@]}
        if [[ $NUM_VFs -gt 0 ]]; then
            #get the PF Device Description
            PF_PCI=$( readlink "${NIC_DIR}/$i/device" | cut -d '/' -f4 )
            PF_VENDOR=$( lspci -vmmks $PF_PCI | grep ^Vendor | cut -f2)
            PF_NAME=$( lspci -vmmks $PF_PCI | grep ^Device | cut -f2).

            echo "Setup passthrough network for interface: $i"
            PF_IFACE[$pfi]=$i

            virsh net-destroy passthrough-`echo $i`
            virsh net-undefine passthrough-`echo $i`

cat <<EOF > passthrough-`echo $i`.xml
<network>
    <name>passthrough-$i</name>
    <forward mode='hostdev' managed='yes'>
        <pf dev='$i'/>
    </forward>
</network>
EOF

            virsh net-define passthrough-`echo $i`.xml
#            virsh net-start passthrough-`echo $i`

#            echo "Virtual Functions on $PF_VENDOR $PF_NAME ($i):"
#            echo -e "PCI BDF\t\tInterface"
#            echo -e "=======\t\t========="
#            for (( l = 0; l < $NUM_VFs; l++ )) ;
#            do
#                echo -e "${VF_PCI_BDF[$l]}\t${VF_INTERFACE[$l]}"
#            done
            unset VF_PCI_BDF
            unset VF_INTERFACE
#            echo " "
            ((pfi++))
        fi
    fi
done

# Setup arch linux ceph cluster
cd /mnt/vmlocal/kvm/guests
rm -rf alcc
mkdir -p alcc/config
cd alcc

virsh destroy alcc
virsh undefine --nvram alcc

qemu-img create -f qcow2 alcc.qcow2 32G

ISOFILE=$(curl ftp://ftp.osuosl.org/pub/archlinux/iso/latest/ | grep -o -E "archlinux-(.*)-x86_64.iso" | uniq)

if [ -f "/mnt/vmlocal/kvm/guests/alcc/$ISOFILE" ]; then
    echo "File /mnt/vmlocal/kvm/guests/alcc/$ISOFILE exists."
else
    echo "File /mnt/vmlocal/kvm/guests/alcc/$ISOFILE does not exist."
#    curl -O http://ftp.osuosl.org/pub/archlinux/iso/latest/$ISOFILE
fi

IFACE="passthrough-%s"
NUM_PFs=${#PF_IFACE[@]}
if [[ $NUM_PFs -gt 0 ]]; then
    PFDEVICE=0
    IFACE=$(printf $IFACE ${PF_IFACE[$PFDEVICE]})

    echo "IFACE=$IFACE"
    virsh net-start `echo $IFACE`
    virsh net-autostart `echo $IFACE`
fi

cat <<EOF > config/alcc_setup.xml
<domain type='kvm'>
  <name>alcc</name>
  <memory unit='GB'>4</memory>
  <vcpu placement='static'>4</vcpu>
  <os>
    <type arch='x86_64' machine='pc-i440fx-2.1'>hvm</type>
    <loader readonly='yes' type='pflash'>/usr/share/ovmf/ovmf_code_x64.bin</loader>
    <nvram template='/usr/share/ovmf/ovmf_vars_x64.bin' />
    <boot dev='hd' />
    <boot dev='cdrom' />
    <bootmenu enable='yes' timeout='3000' />
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <cpu mode='host-model'>
    <model fallback='allow'/>
    <topology sockets='1' cores='2' threads='2'/>
  </cpu>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>restart</on_crash>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='/mnt/vmlocal/kvm/guests/alcc/alcc.qcow2'/>
      <target dev='hda' bus='virtio'/>
    </disk>
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <source file='/mnt/vmlocal/kvm/guests/alcc/$ISOFILE'/>
      <target dev='hdc' bus='ide'/>
      <readonly/>
    </disk>
    <controller type='usb' index='0'>
    </controller>
    <controller type='pci' index='0' model='pci-root'/>
    <controller type='ide' index='0'>
    </controller>
    <interface type='network'>
      <source network='$IFACE'/>
      <model type='rtl8139'/>
    </interface>
    <interface type='network'>
      <source network='$IFACE'/>
      <model type='rtl8139'/>
    </interface>
    <interface type='network'>
      <source network='$IFACE'/>
      <model type='rtl8139'/>
    </interface>
    <interface type='network'>
      <source network='$IFACE'/>
      <model type='rtl8139'/>
    </interface>
    <interface type='network'>
      <source network='$IFACE'/>
      <model type='rtl8139'/>
    </interface>
    <interface type='network'>
      <source network='$IFACE'/>
      <model type='rtl8139'/>
    </interface>
    <serial type='pty'>
      <target port='0'/>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
    <graphics type='vnc' port='-1' autoport='yes' listen='0.0.0.0'>
      <listen type='address' address='0.0.0.0'/>
    </graphics>
    <video>
      <model type='cirrus' vram='9216' heads='1'/>
    </video>
    <!-- graphics type='vnc' port='5901' autoport='no' listen='127.0.0.1'>
      <listen type='address' address='127.0.0.1'/>
    </graphics>
    <video>
      <model type='cirrus' vram='16384' heads='1' primary='yes'/>
    </video -->
    <memballoon model='virtio'>
    </memballoon>
EOF

DEV_DISK_DIR="/dev/disk/by-id"
for i in $( ls $DEV_DISK_DIR);
do
    if [[ $i =~ ST3000DM|Hitachi_HDS5C ]]; then
        echo "Setup block device for: $i"
DEV_DISK_POSTFIX=$(ls -la ${DEV_DISK_DIR}/$i | awk -F"${DEV_DISK_DIR}/$i -> ../../" '{print $2}')
cat <<EOF >> config/alcc_setup.xml
    <disk type="block" device="disk">
      <driver name="qemu" type="raw" />
      <source dev="${DEV_DISK_DIR}/$i" />
      <target dev="$DEV_DISK_POSTFIX" bus="virtio" />
    </disk>
EOF
    fi
done

cat <<EOF >> config/alcc_setup.xml
  </devices>
</domain>
EOF

virsh define config/alcc_setup.xml
virsh start alcc
virsh autostart alcc

exit 1